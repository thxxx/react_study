{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/gimhojin/Desktop/reactnative/spartaNative/App.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport StackNavigator from \"./navigations/StackNavigator\";\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport Loading from \"./pages/Loading\";\nimport * as firebase from 'firebase';\nimport apiKeys from \"./config/key\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  if (!firebase.apps.length) {\n    console.log('Connected with Firebase');\n    firebase.initializeApp(apiKeys.firebaseConfig);\n  }\n\n  var loadFont = function loadFont() {\n    setTimeout(function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                Roboto: require('native-base/Fonts/Roboto.ttf'),\n                Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n              }, Ionicons.font)));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(setReady(true));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1000);\n  };\n\n  useEffect(function () {\n    loadFont();\n  }, []);\n  return ready ? React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(StackNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  })) : React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/gimhojin/Desktop/reactnative/spartaNative/App.jsx"],"names":["React","useState","useEffect","NavigationContainer","StackNavigator","Font","Ionicons","Loading","firebase","apiKeys","App","ready","setReady","apps","length","console","log","initializeApp","firebaseConfig","loadFont","setTimeout","loadAsync","Roboto","require","Roboto_medium","font","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAGA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,cAAP;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAOC,OAAP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AAEA,OAAOC,OAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACFT,QAAQ,CAAC,IAAD,CADN;AAAA;AAAA,MACrBU,KADqB;AAAA,MACdC,QADc;;AAI5B,MAAI,CAACJ,QAAQ,CAACK,IAAT,CAAcC,MAAnB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,IAAAA,QAAQ,CAACS,aAAT,CAAuBR,OAAO,CAACS,cAA/B;AACD;;AAED,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBC,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACHf,IAAI,CAACgB,SAAL;AACJC,gBAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADX;AAEJC,gBAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFlB,iBAGDjB,QAAQ,CAACmB,IAHR,EADG;;AAAA;AAAA;AAAA,+CAMHb,QAAQ,CAAC,IAAD,CANL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAOP,IAPO,CAAV;AAQD,GATD;;AAWAV,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAOR,KAAK,GACV,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADU,GAKV,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF;AAOD;AAED,IAAMe,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport StackNavigator from './navigations/StackNavigator';\n\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport Loading from './pages/Loading';\n\n//파이어베이스 라이브러리 불어오기!\nimport * as firebase from 'firebase';\n//파이어베이스 접속 키값 가져오기\nimport apiKeys from './config/key';\n\nexport default function App() {\n  const [ready, setReady] = useState(true);\n\n  //파이어베이스 라이브러리가 준비 되면 연결하는 조건문!\n  if (!firebase.apps.length) {\n    console.log('Connected with Firebase');\n    firebase.initializeApp(apiKeys.firebaseConfig);\n  }\n\n  const loadFont = () => {\n    setTimeout(async () => {\n      await Font.loadAsync({\n        Roboto: require('native-base/Fonts/Roboto.ttf'),\n        Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n        ...Ionicons.font,\n      });\n      await setReady(true);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    loadFont();\n  }, []);\n\n  return ready ? (\n    <NavigationContainer>\n      <StackNavigator />\n    </NavigationContainer>\n  ) : (\n    <Loading />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}